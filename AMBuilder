# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os

MMSPlugin.plugin_name = 'cs2fixes'
MMSPlugin.plugin_alias = 'cs2fixes'

for sdk_target in MMSPlugin.sdk_targets:
  sdk = sdk_target.sdk
  cxx = sdk_target.cxx

  binary = MMSPlugin.HL2Library(builder, cxx, MMSPlugin.plugin_name, sdk)

  if binary.compiler.family == 'gcc' or binary.compiler.family == 'clang':
    binary.compiler.cxxflags += ['--std=c++17']
  elif binary.compiler.family == 'msvc':
    binary.compiler.cxxflags += ['/std:c++20']

  if binary.compiler.family == 'clang':
    binary.compiler.cxxflags += ['-Wno-register']

  target_folder = 'Debug' if builder.options.debug else 'Release'

  if binary.compiler.target.platform == 'linux':
    binary.compiler.postlink += [
      os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', target_folder, 'libfunchook.a'),
      os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', target_folder, 'libdistorm.a'),
    ]
    binary.sources += ['src/utils/plat_unix.cpp']
  elif binary.compiler.target.platform == 'windows':
    binary.compiler.postlink += [
      os.path.join('psapi.lib'),
      os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', target_folder, 'funchook.lib'),
      os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', target_folder, 'distorm.lib'),
    ]
    binary.sources += ['src/utils/plat_win.cpp']

  binary.sources += [
    'src/consolechat.cpp'
  ]

  binary.compiler.cxxincludes += [
    os.path.join(builder.sourcePath, 'src', 'cs2_sdk'),
    os.path.join(builder.sourcePath, 'src', 'utils'),
    os.path.join(builder.sourcePath, 'vendor', 'funchook', 'include'),
  ]
	
  nodes = builder.Add(binary)
  MMSPlugin.binaries += [nodes]
